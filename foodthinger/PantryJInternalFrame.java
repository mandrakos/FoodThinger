/*
 * PantryJInternalFrame.java
 *
 * Created on June 17, 2006, 9:38 PM
 */

package foodthinger;

import javax.swing.table.DefaultTableColumnModel;

/**
 *
 * @author  RC Stanley
 */
public class PantryJInternalFrame extends javax.swing.JInternalFrame
{
    FoodModel fm = null;
    javax.swing.JInternalFrame addFrame =  null;
    /** Creates new form PantryJInternalFrame */
    public PantryJInternalFrame()
    {
	initComponents();
    }
    
    /** Creates new form PantryJInternalFrame */
    public PantryJInternalFrame(FoodModel fm)
    {
	this.fm = fm;
	initComponents();
    }
    
    /** Creates new form PantryJInternalFrame */
    public PantryJInternalFrame(FoodModel fm, javax.swing.JInternalFrame addFrame)
    {
	this.fm = fm;
	this.addFrame = addFrame;
	initComponents();
    }
    
    /**
     *gets the row,column value as an Integer
     */
    Integer getIntValue(int row, int column)
    {
	int col = this.jTablePantry.convertColumnIndexToView(column);
	Object i = this.jTablePantry.getValueAt(row,col);
	if(i instanceof Integer)
	{
	    return (Integer)this.jTablePantry.getValueAt(row,col);
	}
	return new Integer(-1);
    }
    
    Integer getPantryId(int row)
    {
	return getIntValue(row,0);
    }
    
    protected void pantryRowChange(String sql,String errorMess, String successMess)
    {
	int[] selected = this.jTablePantry.getSelectedRows();
	if(selected!= null && selected.length > 0)
	{
	    String error="";
	    String message="";
	    boolean prob = false;
	    Integer id;
	    
	    for(int i = 0; i < selected.length;i++)
	    {
		id = getPantryId(selected[i]);
		if(id !=null && id.intValue()>=0)
		{
		    System.out.println("deleting "+id);
		    //Constants.DELETE_FOOD_STORED_QUERY
		    error = fm.exec(sql,new String[]{id.toString()}, Constants.TABLE_FOOD_STORED);
		}
		else
		{
		    error = "Could not find Id";
		}
		if(error!=null && error.length()>0)
		{
		    prob = true;
		    //"Error: Could not delete "
		    javax.swing.JOptionPane.showMessageDialog(this.jTablePantry,errorMess+id+"\r\n"+error,errorMess,javax.swing.JOptionPane.ERROR_MESSAGE);
		}
		else
		{
		   message = message + ((i>0)?",":"")+id;
		}
		
	    }
	    if(!prob)
	    {
		javax.swing.JOptionPane.showMessageDialog(this.jTablePantry,successMess+message,successMess,javax.swing.JOptionPane.INFORMATION_MESSAGE);
	    }
	    
	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jPopupMenuTableEdit = new javax.swing.JPopupMenu();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemEdit = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemDecrement = new javax.swing.JMenuItem();
        jToolBar2 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePantry = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTreePantry = new javax.swing.JTree();

        jPopupMenuTableEdit.setInvoker(jTablePantry);
        jPopupMenuTableEdit.setLabel(" ");
        jMenuItemAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemAdd.setMnemonic('a');
        jMenuItemAdd.setText("Add");
        jMenuItemAdd.setActionCommand(foodthinger.Constants.ACTCOM_PANTRY_ADD);
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddButtonAction(evt);
            }
        });

        jPopupMenuTableEdit.add(jMenuItemAdd);

        jMenuItemEdit.setMnemonic('E');
        jMenuItemEdit.setText("Edit");
        jMenuItemEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editAction(evt);
            }
        });

        jPopupMenuTableEdit.add(jMenuItemEdit);

        jMenuItemCopy.setMnemonic('C');
        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                copyAction(evt);
            }
        });

        jPopupMenuTableEdit.add(jMenuItemCopy);

        jMenuItemDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDelete.setMnemonic('d');
        jMenuItemDelete.setText("Delete Row");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteTableRow(evt);
            }
        });

        jPopupMenuTableEdit.add(jMenuItemDelete);

        jMenuItemDecrement.setMnemonic('o');
        jMenuItemDecrement.setText("Decrement by One");
        jMenuItemDecrement.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                decrementItem(evt);
            }
        });

        jPopupMenuTableEdit.add(jMenuItemDecrement);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pantry");
        setToolTipText("Explore what is in your pantry");
        setVisible(true);
        jButton4.setMnemonic('a');
        jButton4.setText("Add");
        jButton4.setActionCommand(foodthinger.Constants.ACTCOM_PANTRY_ADD);
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddButtonAction(evt);
            }
        });
        jButton4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton4MouseReleased(evt);
            }
        });

        jToolBar2.add(jButton4);

        Delete.setMnemonic('d');
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteTableRow(evt);
            }
        });

        jToolBar2.add(Delete);

        getContentPane().add(jToolBar2, java.awt.BorderLayout.NORTH);

        jSplitPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 404));
        jScrollPane1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                pantryKeyTyped(evt);
            }
        });

        PantryTableModel pantryTableModel = new PantryTableModel(fm);
        TableSorter sorter = new TableSorter(pantryTableModel);
        fm.addModelListener(new String[]{Constants.TABLE_FOOD_STORED},pantryTableModel);
        jTablePantry.setComponentPopupMenu(jPopupMenuTableEdit);
        jTablePantry.setModel(sorter);
        jTablePantry.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTablePantry.setSelectionModel(new javax.swing.DefaultListSelectionModel());
        jTablePantry.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sorter.setTableHeader(jTablePantry.getTableHeader());
        jTablePantry.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                pantryKeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                pantryKeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(jTablePantry);

        jSplitPane1.setRightComponent(jScrollPane1);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(100, 324));
        jTreePantry.setMinimumSize(new java.awt.Dimension(24, 24));
        jTreePantry.setModel(fm.getTreeModel());
        jTreePantry.addTreeSelectionListener(pantryTableModel);
        jTreePantry.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                valueChangedHandler(evt);
            }
        });

        jScrollPane3.setViewportView(jTreePantry);

        jSplitPane1.setLeftComponent(jScrollPane3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void editAction(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editAction
    {//GEN-HEADEREND:event_editAction
	//get value for selected row
	int[] selected = this.jTablePantry.getSelectedRows();
	if(selected!= null && selected.length > 0)
	{
	    String error="";
	    String message="";
	    boolean prob = false;
	    Integer id;
	    id = getPantryId(selected[0]);
	    if(id !=null && id.intValue()>=0)
	    {
		//TODO probably should check if ID is valid    
		((PantryAddJInternalFrame)addFrame).show(id);
	    }
	    else
	    {
		error = "Could not find Id";
	    }
	    if(error!=null && error.length()>0)
	    {
		prob = true;
		//"Error: Could not delete "
		javax.swing.JOptionPane.showMessageDialog(this.jTablePantry,error,error,javax.swing.JOptionPane.ERROR_MESSAGE);
	    }
	    
		
	    
	}
	
    }//GEN-LAST:event_editAction

    private void decrementItem(java.awt.event.ActionEvent evt)//GEN-FIRST:event_decrementItem
    {//GEN-HEADEREND:event_decrementItem
	int[] selected = this.jTablePantry.getSelectedRows();
	if(selected!= null && selected.length > 0)
	{
	    String error="";
	    String message="";
	    boolean prob = false;
	    Integer id;
	    Integer amount;
	    for(int i = 0; i < selected.length;i++)
	    {
		id = getPantryId(selected[i]);
		
		if(id !=null && id.intValue()>=0)
		{
		    amount = getIntValue(selected[i],7);
		    if(amount.intValue()>1)
		    {
			String amt = String.valueOf( amount.intValue() - 1);
			error = fm.exec(Constants.UPDATE_FOOD_STORED_AMOUNT,new String[]{amt,id.toString()}, Constants.TABLE_FOOD_STORED);
		    }
		    else 
		    {
			error = fm.exec(Constants.DELETE_FOOD_STORED_QUERY,new String[]{id.toString()}, Constants.TABLE_FOOD_STORED);
		    }
		}
		else
		{
		    error = "Could not find Id";
		}
		if(error!=null && error.length()>0)
		{
		    prob = true;
		    //"Error: Could not delete "
		    javax.swing.JOptionPane.showMessageDialog(this.jTablePantry,Constants.ERROR_DECREMENTING+id+"\r\n"+error,Constants.ERROR_DECREMENTING,javax.swing.JOptionPane.ERROR_MESSAGE);
		}
		else
		{
		   message = message + ((i>0)?",":"")+id;
		}
		
	    }
	    if(!prob)
	    {
		javax.swing.JOptionPane.showMessageDialog(this.jTablePantry,Constants.SUCCESS_DECREMENTING+message,Constants.SUCCESS_DECREMENTING,javax.swing.JOptionPane.INFORMATION_MESSAGE);
	    }
	    
	}
    }//GEN-LAST:event_decrementItem

    private void copyAction(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyAction
    {//GEN-HEADEREND:event_copyAction
	
	pantryRowChange(Constants.COPY_FOOD_STORED_QUERY,Constants.ERROR_INSERTING,Constants.SUCCESS_INSERTING);
	
    }//GEN-LAST:event_copyAction

    private void pantryKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_pantryKeyTyped
    {//GEN-HEADEREND:event_pantryKeyTyped
	int code = evt.getKeyCode();
	System.out.println("got code "+code);
	if(code==evt.VK_DELETE || (code == evt.VK_X && evt.isControlDown()))
	{
	    pantryRowChange(Constants.DELETE_FOOD_STORED_QUERY, Constants.ERROR_DELETING, Constants.SUCCESS_DELETING);
	}
	
    }//GEN-LAST:event_pantryKeyTyped

    private void AddButtonAction(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddButtonAction
    {//GEN-HEADEREND:event_AddButtonAction
	((PantryAddJInternalFrame)addFrame).show(Constants.PANTRY_ADDR_ADD_VALUE);
    }//GEN-LAST:event_AddButtonAction

    private void deleteTableRow(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteTableRow
    {//GEN-HEADEREND:event_deleteTableRow
	pantryRowChange(Constants.DELETE_FOOD_STORED_QUERY, Constants.ERROR_DELETING, Constants.SUCCESS_DELETING);
    }//GEN-LAST:event_deleteTableRow

    private void valueChangedHandler(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_valueChangedHandler
    {//GEN-HEADEREND:event_valueChangedHandler
	
    }//GEN-LAST:event_valueChangedHandler
/**
 *pop the add an item to the pantry window
 */
    private void jButton4MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton4MouseReleased
    {//GEN-HEADEREND:event_jButton4MouseReleased
	addFrame.show();
	//System.out.println(parent.toString());
    }//GEN-LAST:event_jButton4MouseReleased
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemDecrement;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemEdit;
    private javax.swing.JPopupMenu jPopupMenuTableEdit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTablePantry;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree jTreePantry;
    // End of variables declaration//GEN-END:variables
    
}
