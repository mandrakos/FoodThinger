/*
 * ReportJInternalFrame.java
 *
 * Created on September 30, 2006, 6:02 PM
 */

package foodthinger;
import net.sourceforge.chart2d.*;

/**
 *
 * @author  RC Stanley
 */
public class ReportJInternalFrame extends javax.swing.JInternalFrame
{
    FoodModel fm;
    java.util.Vector categories;
    java.io.File exportFile;
    java.util.HashMap map;
    String[][]conversions;
    /** Creates new form ReportJInternalFrame */
    public ReportJInternalFrame(FoodModel fm)
    {
	this.fm = fm;
	categories = new java.util.Vector();
	map = new java.util.HashMap();
	initComponents();
	javax.swing.JTable t= new javax.swing.JTable(new Object[0][Constants.COL_NAMES.length],Constants.COL_NAMES);
	//t.setPreferredScrollableViewportSize( new java.awt.Dimension(500, 70));
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	this.jPanelExpiredTable.removeAll();
	this.jPanelExpiredTable.add(p);
	this.jPanelExpiredTable.validate();
	conversions = fm.getStringsFromQuery(Constants.CONVERSION_QUERY,null,new int[]{0,1,2});
	getDataGeneral();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelGeneral = new javax.swing.JPanel();
        jPanelGoal = new javax.swing.JPanel();
        jPanelFoodToGet = new javax.swing.JPanel();
        jScrollPaneExpired = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelMonths = new javax.swing.JLabel();
        jComboBoxMonths = new javax.swing.JComboBox();
        jCheckBoxIncludeExpired = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jPanelExpiredTable = new javax.swing.JPanel();
        jPanelQuery = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jPanelQueryResults = new javax.swing.JPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemSave = new javax.swing.JMenuItem();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports");
        setFrameIcon(null);
        setPreferredSize(new java.awt.Dimension(200, 200));
        setRequestFocusEnabled(false);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
                getData(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                getData(evt);
            }
        });

        jPanelGeneral.setLayout(new javax.swing.BoxLayout(jPanelGeneral, javax.swing.BoxLayout.X_AXIS));

        jTabbedPane1.addTab("Totals", jPanelGeneral);

        jPanelGoal.setLayout(new javax.swing.BoxLayout(jPanelGoal, javax.swing.BoxLayout.X_AXIS));

        jTabbedPane1.addTab("Percent of Goal", jPanelGoal);

        jPanelFoodToGet.setLayout(new java.awt.GridLayout(1, 0));

        jTabbedPane1.addTab("Food To get", jPanelFoodToGet);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelMonths.setLabelFor(jComboBoxMonths);
        jLabelMonths.setText("Number of Months");
        jPanel2.add(jLabelMonths);

        jComboBoxMonths.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "3", "6", "9", "12" }));
        jPanel2.add(jComboBoxMonths);

        jCheckBoxIncludeExpired.setSelected(true);
        jCheckBoxIncludeExpired.setText("Include Food Already Expired");
        jCheckBoxIncludeExpired.setToolTipText("Show food that has expired previous to today");
        jPanel2.add(jCheckBoxIncludeExpired);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);

        jPanel1.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanelExpiredTable, gridBagConstraints);

        jScrollPaneExpired.setViewportView(jPanel1);

        jTabbedPane1.addTab("Expired", jScrollPaneExpired);

        jPanelQuery.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 100));
        jTextArea1.setMinimumSize(new java.awt.Dimension(100, 18));
        jTextArea1.setPreferredSize(new java.awt.Dimension(300, 100));
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jButton2.setText("Execute");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        jPanelQuery.add(jPanel3, gridBagConstraints);

        jPanelQueryResults.setLayout(new java.awt.GridLayout(1, 0));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanelQuery.add(jPanelQueryResults, gridBagConstraints);

        jTabbedPane1.addTab("Query", jPanelQuery);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jMenu2.setText("Export");
        jMenuItemSave.setText("Export");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                actionPerformedHandler(evt);
            }
        });

        jMenu2.add(jMenuItemSave);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
   
    
    /**
     * get the current report, convert it to html 
     */
    private String getTableAsHtml()
    {
	java.awt.Component c = this.jTabbedPane1.getSelectedComponent();
	String html=null;
	/*if(c instanceof javax.swing.JPanel)
	{
	    javax.swing.JPanel jp = (javax.swing.JPanel)c;
	    java.awt.Component c2[] = jp.getComponents();
	    javax.swing.JTable table = null;
	    findTable(jp);
	    for(int i = 0; i<c2.length;i++)
	    {
		if(c2[i] instanceof javax.swing.JTable)
		{
		    table = (javax.swing.JTable)c2[i];
		}
	    }
	    if(table!=null)//found the table
	    {
		String title = this.jTabbedPane1.getTitleAt(this.jTabbedPane1.getSelectedIndex());
		html = "<html><head>"+title+"</head>\r\n";
		html+="<body><h2>"+title+"</h2><br>\r\n";
		html+="<h3>As of "+(new java.util.Date()).toString()+"</h3><br>\r\n";
		//do the table
		html+="<table><thead><tr>";
		//get the table header
		for(int i=0;i<table.getColumnCount();i++)
		{
		    html+="<td>"+table.getColumnName(i)+"</td>";
		}
		html+="</tr></thead>";
		//get the table body
		for(int i =0; i<table.getColumnCount();i++)
		{
		    html+="<tr>";
		    for(int j =0;j<table.getRowCount();j++)
		    {
			html+=table.getValueAt(j, i);
		    }
		    html+="</tr>\r\n";
		}
		html+="</body></html>";
	    }//end if table null
	}*/
	return html;
    }
    private void actionPerformedHandler(java.awt.event.ActionEvent evt)//GEN-FIRST:event_actionPerformedHandler
    {//GEN-HEADEREND:event_actionPerformedHandler
        //get the table
	java.awt.Component c = this.jTabbedPane1.getSelectedComponent();
	javax.swing.JTable table = (javax.swing.JTable)map.get(c);
	if(table!=null)
	{
	    GeneralExportJInternalFrame dialog = new GeneralExportJInternalFrame(new javax.swing.JFrame(),true,fm,table, this.jTabbedPane1.getTitleAt(this.jTabbedPane1.getSelectedIndex()));
	    dialog.setVisible(true);
	}
	else //TODO throw up an error dialog
	{
	    javax.swing.JOptionPane.showMessageDialog(this,"Unable to export information, no information exists");
	}
	//get the new file
	/*javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
	String error="";
	if(exportFile!=null)
	{
	    fc.setSelectedFile(exportFile);
	}
	int returnval = fc.showSaveDialog(this);
	if(returnval == fc.APPROVE_OPTION)
	{
	    exportFile = fc.getSelectedFile();
	    if(exportFile == null) return;
	    //open the file, get the info, and save it
	    //get the info from the db
	    String table = getTableAsHtml();
	    if(table==null )
	    {
		javax.swing.JOptionPane.showMessageDialog(this,"Could not export information:"+error,"Could not export information",javax.swing.JOptionPane.ERROR_MESSAGE);
	    }
	    try
	    {
		if(exportFile.exists())
		{
		    int overwrite = javax.swing.JOptionPane.showConfirmDialog(this,"File "+exportFile + " already exists.  Do you want to Overwrite?");
		    if(overwrite != javax.swing.JOptionPane.YES_OPTION) return;
		}
    		writeFile(exportFile,table);
	   	
	    }
	    catch(Exception e)
	    {
		javax.swing.JOptionPane.showMessageDialog(this,"Could not export information:"+e.toString(),"Could not export information",javax.swing.JOptionPane.ERROR_MESSAGE);
	    }
	    if(error.length() > 0) //error, warn couldn't save
	    {
		javax.swing.JOptionPane.showMessageDialog(this,"Could not export information:"+error,"Could not export information",javax.swing.JOptionPane.ERROR_MESSAGE);
	    }
	    else //no errors, close window
	    {
		try
		{
		    this.setClosed(true);
		}
		catch (Exception e)
		{
		    System.out.println(e);
		}
	    }
	}*/
	
	
                                       

    }//GEN-LAST:event_actionPerformedHandler
    /** writes the strings to the export file
     */
 public void writeFile(java.io.File file, String data) throws java.io.IOException
 {
     //open the file
	//write the file
	java.io.FileWriter out = new java.io.FileWriter(exportFile);
	//write the headers
	
	    out.write(data);
	
    //close the file
	out.flush();
	out.close();
 }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
	//clear out old results
	this.jPanelQueryResults.removeAll();
	//execute the query
	String query = this.jTextArea1.getText();
	query = query.trim();
	boolean exec = false;
	if(query.length()==0)
	{
	    //error, no query
	    return;
	}
	if(query.contains("update"))
	{
	    exec = true;
	}
	else if(query.contains("insert"))
	{
	    exec = true;
	}
	else if(query.contains("delete"))
	{
	    exec = true;
	}
	//output results
	if(exec)
	{
	    String error = fm.exec(query); 
	    if(error!=null && error.length()>0)
	    {
		javax.swing.JOptionPane.showMessageDialog(this,Constants.REPORT_QUERY_ERROR+error);
		return;
	    }
	    javax.swing.JOptionPane.showMessageDialog(this,Constants.REPORT_QUERY_SUCCESS);
	    map.put(this.jPanelQuery, null);
	    
	}
	else //this is a select query
	{
	    String[][] results = fm.getStringsFromQuery(query,null,true);
	    if(results==null) results = new String[][]{{""}};
	    javax.swing.JTable t= new javax.swing.JTable(results,results[0]);
	    t.setPreferredScrollableViewportSize( new java.awt.Dimension(500, 70));
	    javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	    this.jPanelQueryResults.add(p);
	    this.jPanelQuery.validate();
	    map.put(this.jPanelQuery, t);
	}
	
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
	createExpiredFoods();
	
    }//GEN-LAST:event_jButton1ActionPerformed

    private void getData(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_getData
    {//GEN-HEADEREND:event_getData
	//get the data for all the frames
	categories = new java.util.Vector();
	getDataGeneral();
	createTotalsTab();
	createNeededTab();
	createGoalsGraph();
    }//GEN-LAST:event_getData
    
  /*  public void createTotalsTab()
    {
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    if(can.hasValues())
	    {
		javax.swing.JPanel jp = new javax.swing.JPanel();
		javax.swing.JLabel label = new javax.swing.JLabel();
		label.setText(can.getCategory()+" "+can.getPercentCompleted());
		jp.add(label);
		//add tableTotals
		javax.swing.JTable t= new javax.swing.JTable(can.createTotalTable(),Constants.REPORT_TOTAL_COL_NAMES);
		t.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 70));
		javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
		jp.add(p);
		this.jPanelGeneral.add(jp);
	    }
	}


    }*/
    
    /**
     * find the maximum number of subcategories
     */
    int countSubCat()
    {
	Cannery can;
	SubCategory sub;
	int count = 0;
	for(int i =0; i<this.categories.size();i++)
	{
	    can = (Cannery)this.categories.get(i);
	    count += can.numSubCategories();
	}
	return count;
    }
    
   String[] getGraphTitles()
   {
       String[]titles = new String[countSubCat()];
       int count = 0;
       for(int i=0;i<this.categories.size();i++)
       {
	   Cannery cat = (Cannery)this.categories.get(i);
	   for(int j = 0; j<cat.subCategories.size();j++)
	   {
		titles[count++]=((SubCategory)cat.subCategories.get(j)).subCategory; 
	   }
       }
       return titles;
   }
    
    /**
     * creates the bar graph of how many months of food you have
     */
    public void createGoalsGraph()
    {
	//create the new graph object
	LLChart2D graph = new LLChart2D(); 
	Object2DProperties object2DProps = new Object2DProperties();
	object2DProps.setObjectTitleText (Constants.GRAPH_TITLE);
	
	Chart2DProperties chart2DProps = new Chart2DProperties();
	chart2DProps.setChartDataLabelsPrecision (-2);

	LegendProperties legendProps = new LegendProperties();
	legendProps.setLegendExistence (false);
	
	GraphChart2DProperties graph2DProps = new GraphChart2DProperties();
	graph2DProps.setChartDatasetCustomGreatestValue(fm.getNumPlanMonths());
	graph2DProps.setChartDatasetCustomLeastValue(0f);
	graph2DProps.setChartDatasetCustomizeGreatestValue(true);
	graph2DProps.setChartDatasetCustomizeLeastValue(true);
	graph2DProps.setNumbersAxisTitleText(Constants.GRAPH_NUMBER_TITLE);
	graph2DProps.setLabelsAxisTitleText(Constants.GRAPH_LABELS_TITLE);
	graph2DProps.setLabelsAxisLabelsTexts(getGraphTitles());
	graph2DProps.setNumbersAxisNumLabels(fm.getNumPlanMonths()+1);
	GraphProperties graphProps = new GraphProperties();
	//graphProps.set
	MultiColorsProperties multiColorsProps = new MultiColorsProperties();
	
	Dataset dataset = new Dataset (1, countSubCat(), 1);
	//don't create the data if a plan hasn't been created
	if(fm.getNumPlanMonths()>0)
	{
	    int place = 0;
	    for(int i = 0; i<this.categories.size();i++)
	    {
		place = ((Cannery)this.categories.get(i)).createGraphDataSet(dataset,place,fm.getNumPlanMonths());
	    }
	}
	graph.setObject2DProperties (object2DProps);
	graph.setChart2DProperties (chart2DProps);
	graph.setLegendProperties (legendProps);
	graph.setGraphChart2DProperties (graph2DProps);
	graph.addGraphProperties (graphProps);
	graph.addDataset (dataset);
	graph.addMultiColorsProperties (multiColorsProps);
	this.jPanelGoal.removeAll();
	graph.pack();
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(graph);
	this.jPanelGoal.add(p); 
	this.jPanelGoal.validate();
    }
    
    public void createExpiredFoods()
    {
	//get the number of months ahead
	int months = Integer.parseInt((String)this.jComboBoxMonths.getSelectedItem());
	//get whether to include already expired
	boolean addExpired = this.jCheckBoxIncludeExpired.isSelected();
	//get table
	String[][] table = null;
	String sql = new String(Constants.FOOD_STORED_TABLE_QUERY);
	sql = sql + Constants.SELECT_EXPIRED_WHERE_QUERY;
	sql = sql.replace("%q", fm.getToday(months));
	if(!addExpired)
	{
	    sql = sql+Constants.IGNORE_EXPIRED_QUERY;
	}
	table = fm.getFoodTable(sql,false);
	if(table == null)
	{
	    table = new String[0][Constants.COL_NAMES.length];
	}
	//create scroll panel/tabel/etc
	javax.swing.JTable t= new javax.swing.JTable(table,Constants.COL_NAMES);
	//t.setPreferredScrollableViewportSize( new java.awt.Dimension(500, 70));
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	this.jPanelExpiredTable.removeAll();
	this.jPanelExpiredTable.add(p);
	this.jPanelExpiredTable.validate();
	map.put(this.jPanelExpiredTable, t);
    }
    /**
     * create the table that goes in the totals tab
     */
    public void createTotalsTab()
    {
	
	//javax.swing.JPanel jp = new javax.swing.JPanel();
	Object[][]table = new Object[this.countTotalLines()][Constants.REPORT_TOTAL_COL_NAMES.length];
	int place = 0;
	int header;
	int count;
	float average = 0;
	//for each cannery category
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    //if it has any food items that we want
	    if(can.hasValues())
	    {
		//create the bold line for the cateogry itself
		header = place;
		//create line
		table[header][0] = Constants.START_BOLD+can.getCategory()+Constants.END_BOLD;
		table[header][1]= "";
		table[header][2]="";
		
		place++;
		//add tableTotals
		java.util.Vector subCategories = can.subCategories;
		count = 0;
		average=0;
		//create one sub line for each of the sub categories
		for(int j = 0; j<subCategories.size();j++)
		{
		    SubCategory sub = (SubCategory)subCategories.get(j);
		    table[place][0] = sub.getSubCategory();
		    table[place][1] = Float.valueOf(sub.getGoalAmount())+" "+sub.getAmountName();
		    table[place][2] = Float.valueOf(sub.getAmount())+" "+sub.getAmountName();
		    table[place][3] = sub.getPercentCompleted();
		    place++;
		    average+=sub.getAmount()/sub.getGoalAmount();
		    count++;
		}
		table[header][3] = Constants.START_BOLD+(average/count * 100) +" %"+Constants.END_BOLD;
	    }//end if
	    
	}
	javax.swing.JTable t= new javax.swing.JTable(table,Constants.REPORT_TOTAL_COL_NAMES);
	//t.setPreferredScrollableViewportSize( new java.awt.Dimension(500, 70));
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	this.jPanelGeneral.removeAll();
	this.jPanelGeneral.add(p);
	map.put(this.jPanelGeneral, t);

    }

   /* public void createNeededTab()
    {
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    if(can.hasValues())
	    {
		javax.swing.JPanel jp = new javax.swing.JPanel();
		javax.swing.JLabel label = new javax.swing.JLabel();
		label.setText(can.getCategory());
		jp.add(label);
		//add tableTotals
		javax.swing.JTable t= new javax.swing.JTable(can.createNeededTable(),Constants.REPORT_REMAINING_COL_NAMES);
		t.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 70));
		javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
		jp.add(p);
		this.jPanelFoodToGet.add(jp);
	    }
	}*/
	
    /**
     * create the tab for what the user needs to buy
     */
    public void createNeededTab()
    {
	
	//javax.swing.JPanel jp = new javax.swing.JPanel();

	javax.swing.JTable t= new javax.swing.JTable(createNeededTable(),Constants.REPORT_REMAINING_COL_NAMES);
	//t.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 70));
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	//jp.add(p);
	this.jPanelFoodToGet.removeAll();
	this.jPanelFoodToGet.add(p);
	map.put(this.jPanelFoodToGet, t);

    }
    /**
     * count how big the table should be for the needed tab
     */
    int countNeededLines()
    {
	int count = 0;
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    if(can.hasValues())
	    {
		java.util.Vector sub = (java.util.Vector)can.subCategories;
		for(int j=0;j<sub.size();j++)
		{
		    SubCategory s = (SubCategory)sub.get(j);
		    if(s.getGoalAmount()>s.getAmount()) count++;
		}
	    }
	    
	}
	return count;
    }
    
    /**
     * count how big the table should be for the total tab
     */
    int countTotalLines()
    {
	int count = 0;
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    if(can.hasValues())
	    {
		java.util.Vector sub = (java.util.Vector)can.subCategories;
		count+=sub.size();
		//for the category
		count++;
	    }
	    
	    
	}
	return count;
    }
    
    /**
     * make 1 table
     */
    Object[][] createNeededTable()
    {
	Object[][] table = new Object[this.countNeededLines()][Constants.REPORT_REMAINING_COL_NAMES.length];
	int place = 0;
	for(int i=0; i<categories.size();i++)
	{
	    Cannery can = (Cannery)categories.get(i);
	    if(can.hasValues())
	    {
		java.util.Vector sub = (java.util.Vector)can.subCategories;
		for(int j=0;j<sub.size();j++)
		{
		    
		    SubCategory s = (SubCategory)sub.get(j);
		    if(s.getGoalAmount()>s.getAmount())
		    {
			float remaining = s.getGoalAmount() - s.getAmount();
			table[place][0] = can.getCategory();
			table[place][1] = s.getSubCategory();
			table[place][2] = String.valueOf(remaining)+ " "+ s.getAmountName();
			if(s.getContainerAmount()<=0||remaining<=0)
			{
			    table[place][3]="";
			}
			else
			{
			    String ss = String.valueOf(Math.ceil(remaining/s.getContainerAmount()));
			    table[place][3] = ss;
			}
			place++;
		    }
		}

	    }
	    
	}
	return table;
    }
    
    
    public void getDataGeneral()
    {
	//clear the pannel
	this.jPanelGeneral.removeAll();
	//for each category
	String[][]cannery = fm.getStringsFromQuery(Constants.TREE_MODEL_CATEGORY_QUERY,null,new int[]{0,1});
	for(int i = 0; i<cannery.length;i++)
	{
	    //createGeneralCategory(cannery[i][1],Integer.parseInt(cannery[i][0]));
	    categories.add(createInfo(cannery[i][1],Integer.parseInt(cannery[i][0])));
	}
    }
    
    Cannery createInfo(String cannery, int can_id)
    {
	javax.swing.JPanel jp = new javax.swing.JPanel();
	javax.swing.JLabel label = new javax.swing.JLabel();
	//set up the conversion charts
	
	Cannery can = new Cannery(cannery,can_id);
	//get the user food storage amounts
	String[][] results = fm.getStringsFromQuery(Constants.REPORT_GENERAL_USER_AMOUNTS,new String[]{String.valueOf(can_id)},new int[]{0,1,2});
	String[][] foods;
	//for each sub category
	float gsubamount = 0; //goal sub amount
	float subAmount = 0;
	float catAmount = 0;
	float gcatAmount = 0; //goal category ammount
	int gamountId = -1; //what units the amount is in
	float conversionFactor=0; //conversion factor to convert food stored amounts to the goal amounts
	SubCategory sub;
	String sql;
	if(results!=null && results.length>0)
	{
	    if(results!=null && results.length>0)
	    {
		for(int i = 0; i < results.length;i++)
		{
		    
		    subAmount = 0;
		    gsubamount = 0;
		    gsubamount = Float.parseFloat(results[i][1]);
		    gcatAmount += gsubamount; 
		    gamountId = Integer.parseInt(results[i][2]);
		    sub = new SubCategory(Integer.parseInt(results[i][0]), (String)fm.idToSubCategory.get(results[i][0]), Float.parseFloat(results[i][1]),gamountId, (String)fm.idToAmount.get(results[i][2]));		    
		    //check and see how much of each food we have
		    //also leave out expired foods from the reports if it isn't wanted
		    sql = fm.getBooleanProperty(Constants.PROP_USE_EXPIRED)?Constants.REPORT_GENERAL_FOODS:(Constants.REPORT_GENERAL_FOODS+Constants.REPORT_GENERAL_FOODS_WHERE);//
		    foods = fm.getStringsFromQuery(sql,new String[]{/*results[i][2]amountId,*/results[i][0]},new int[]{0,1,2});
		    if(foods!=null && foods.length > 0)
		    {
			for(int j = 0; j<foods.length;j++)
			{
			    //CONVERT amount to same as in goal amount
			    //if can't convert, then skip
			    conversionFactor = conversionFactor(foods[j][2],results[i][2]);
			    if(conversionFactor > 0)
			    {
				sub.addAmount(Integer.parseInt(foods[j][0]) * Float.parseFloat(foods[j][1])*conversionFactor);
			    }
			    
			    
			}
		    }
		    String[][] ten = fm.getStringsFromQuery(Constants.NUMBER_TEN_CAN_WEIGHT_QUERY,new String[]{String.valueOf(sub.amountId),Constants.NUMBER_TEN_CAN_ID,String.valueOf(sub.getSubCategoryId())},new int[]{0,1});  
		    if(ten!=null && ten.length>0)
		    {
			for(int j=0;j<ten.length;j++)
			{
			    sub.setContainerAmount(Float.parseFloat(ten[j][0]), Integer.parseInt(ten[j][1]));
			}
		    }

		    catAmount+=subAmount;
		    //amount have
		   can.addSubCategory(sub); 
		}
	    }
	}
	return can;
    }
    
    float conversionFactor(String start, String end )
    {
	if(start.equals(end)) return 1;
	for(int i = 0; i<conversions.length;i++)
	{
	    if(conversions[i][0].equals(start))
	    {
		if(conversions[i][1].equals(end))
		{
		    return Float.parseFloat(conversions[i][2]);
		}
	    }
	}
	
	return -1;
    }

    
        
   /* void createGeneralCategory(String cannery, int can_id)
    {
	javax.swing.JPanel jp = new javax.swing.JPanel();
	javax.swing.JLabel label = new javax.swing.JLabel();
	label.setText(cannery);
	//get the user food storage amounts
	String[][] results = fm.getStringsFromQuery(Constants.REPORT_GENERAL_USER_AMOUNTS,new String[]{String.valueOf(can_id)},new int[]{0,1,2});
	String[][] foods;
	//for each sub category
	float gsubamount = 0;
	float subAmount = 0;
	float catAmount = 0;
	float gcatAmount = 0;
	Object[][] tableTotals = null;
	if(results!=null && results.length>0)
	{
	    tableTotals = new String[results.length][Constants.REPORT_GENERAL_COL_NAMES.length];
	    if(results!=null && results.length>0)
	    {
		for(int i = 0; i < results.length;i++)
		{
		    subAmount = 0;
		    gsubamount = 0;
		    tableTotals[i][0] = (String)fm.idToSubCategory.get(results[i][0]);
		    gsubamount = Float.parseFloat(results[i][1]);
		    gcatAmount += gsubamount; 
		    tableTotals[i][1] = results[i][1]+" "+(String)fm.idToAmount.get(results[i][2]);
		    //check and see how much of each food we have
		    foods = fm.getStringsFromQuery(Constants.REPORT_GENERAL_FOODS,new String[]{results[i][2],results[i][0]},new int[]{0,1,2});
		    if(foods!=null && foods.length > 0)
		    {
			for(int j = 0; j<foods.length;j++)
			{
			    //add it up
			    subAmount+= Integer.parseInt(foods[j][0]) * Float.parseFloat(foods[j][1]);
			}
		    }
		    catAmount+=subAmount;
		    //amount have
		    tableTotals[i][2]= String.valueOf(subAmount)+ " " +(String)fm.idToAmount.get(results[i][2]);
		    //percent goal
		    if(gsubamount==0 )
		    {
			tableTotals[i][3] = "100%";
		    }
		    else
		    {
			tableTotals[i][3]= String.valueOf((subAmount/gsubamount)*100)+" %";
		    }

		}
	    }
	}
	if(gcatAmount > 0)
	{
	    label.setText(label.getText()+" "+String.valueOf((catAmount/gcatAmount)*100)+"%");
	}
	if(tableTotals==null)
	{
	    tableTotals = new Object[0][Constants.REPORT_GENERAL_COL_NAMES.length];
	}
	//add label
	jp.add(label);
	//add tableTotals
	javax.swing.JTable t= new javax.swing.JTable(tableTotals,Constants.REPORT_GENERAL_COL_NAMES);
	t.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 70));
	javax.swing.JScrollPane p = new javax.swing.JScrollPane(t);
	jp.add(p);
	this.jPanelGeneral.add(jp);
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBoxIncludeExpired;
    private javax.swing.JComboBox jComboBoxMonths;
    private javax.swing.JLabel jLabelMonths;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelExpiredTable;
    private javax.swing.JPanel jPanelFoodToGet;
    private javax.swing.JPanel jPanelGeneral;
    private javax.swing.JPanel jPanelGoal;
    private javax.swing.JPanel jPanelQuery;
    private javax.swing.JPanel jPanelQueryResults;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneExpired;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
}

class Cannery
{
    String canneryCategory;
    int catId;
    java.util.Vector subCategories;
    float goalAmount;
    float amount;
        
    Cannery(String cannery, int id)
    {
	this.canneryCategory = cannery;
	this.catId = id;
	subCategories = new java.util.Vector();
	goalAmount = 0;
	amount = 0;
    }
    
    Cannery()
    {
	
    }
    
    /**
     * returns if there are subcategories
     */
    boolean hasValues()
    {
	return subCategories.size()>0;
    }
    
    String getPercentCompleted()
    {
	if(goalAmount==0) return "100%";
	return String.valueOf((amount/goalAmount) *100)+"%";
    }
    
    Object[][] createTotalTable()
    {
	Object[][] table = new Object[subCategories.size()][Constants.REPORT_TOTAL_COL_NAMES.length];
	for(int i = 0; i<this.subCategories.size();i++)
	{
	    SubCategory sub = (SubCategory)subCategories.get(i);
	    table[i][0] = sub.getSubCategory();
	    table[i][1] = Float.valueOf(sub.getGoalAmount())+" "+sub.getAmountName();
	    table[i][2] = Float.valueOf(sub.getAmount())+" "+sub.getAmountName();
	    table[i][3] = sub.getPercentCompleted();
	}
	return table;
    }
    
    Object[][] createNeededTable()
    {
	
	Object[][] table = new Object[subCategories.size()][Constants.REPORT_REMAINING_COL_NAMES.length];
	for(int i = 0; i<this.subCategories.size();i++)
	{
	    SubCategory sub = (SubCategory)subCategories.get(i);
	    float remaining = sub.getGoalAmount()-sub.getAmount();
	    table[i][0] = sub.getSubCategory();
	    table[i][1] = String.valueOf(remaining)+ " "+sub.getAmountName();
	    //#10 cans
	    if(sub.getContainerAmount()<=0||remaining<=0)
	    {
		table[i][2]="N/A";
	    }
	    else
	    {
		table[i][2] = Math.ceil(remaining/sub.getContainerAmount());
	    }
	}
	return table;
    }
    
    int createGraphDataSet(Dataset dataset,int numSet, float numMonths)
    {
	SubCategory sub;
	for(int i = 0;i<this.subCategories.size();i++)
	{
	    sub = (SubCategory)this.subCategories.get(i);
	    float value = (sub.getAmount()/sub.getGoalAmount()) * numMonths;
	    if(value>numMonths) value = numMonths;
	    dataset.add(0,numSet++,0, value);
	}
	return numSet;
    }
    
    String getCategory()
    {
	return this.canneryCategory;
    }
    
    void addSubCategory(SubCategory sub)
    {
	this.addAmount(sub.getAmount());
	this.addGoalAmount(sub.getGoalAmount());
	subCategories.add(sub);
    }
    
        void addGoalAmount(float a)
    {
	goalAmount += a;
    }
    
    void addAmount(float a)
    {
	amount+=a;
    }
    
    float getGoalAmount()
    {
	return goalAmount;
    }
    
    float getAmount()
    {
	return amount;
    }
    
    int numSubCategories()
    {
	return this.subCategories.size();
    }
   
}

/**
 * holds the information about a subcategory, like how much is needed
 */
class SubCategory extends Cannery
{
    String amountIdName;
    int amountId;
    String subCategory;
    int subCategoryId;
    float smallestContainerAmount;
    int containerId;
    
    SubCategory(int subCategoryId, String subCategory,float goalAmount, int amountId, String amountName)
    {
	this.subCategory = subCategory;
	this.subCategoryId = subCategoryId;
	this.goalAmount = goalAmount;
	this.amountId = amountId;
	this.amountIdName =amountName;
	this.smallestContainerAmount = 0;
	this.subCategoryId = subCategoryId;
	amount = 0;
	goalAmount = 0;
    }
    
    String getAmountName()
    {
	return amountIdName;
    }
    
     int getAmountId()
    {
	return amountId;
    }
    
    
    String getSubCategory()
    {
	return subCategory;
    }
    
    public String toString()
    {
	return subCategory;
    }
    
    public int getSubCategoryId()
    {
	return this.subCategoryId;
    }
    
    /**
     * set the amount of product can fit in a #10 can, the containerId isn't used
     */
    public void setContainerAmount(float amount, int containerId)
    {
	//hasn't been set yet, so set it
	if(smallestContainerAmount==0)
	{
	    smallestContainerAmount = amount;
	    this.containerId = containerId;
	}
	else if(smallestContainerAmount>amount) 
	{
	    smallestContainerAmount = amount;
	    this.containerId = containerId;
	}
	
    }
    
    public float getContainerAmount()
    {
	return smallestContainerAmount;
    }
}
